subroutine getInverse(a,b,sizeOfMatrix)
    implicit none
    integer,intent(in) :: sizeOfMatrix
    real,dimension(sizeOfMatrix,sizeOfMatrix) ,intent(inout) ::a
    integer, external :: getRowNumberForMaxValueInColumn
    real,dimension(sizeOfMatrix,sizeOfMatrix) ,intent(out) ::b



    integer :: rowCounter, columnCounter

    integer :: stepCounter

    integer :: pivotRow, pivotColumn

    real :: pivot

    real :: factor


    integer :: rowCurrent, rowMaximum



    do rowCounter = 1, sizeOfMatrix
        do columnCounter = 1, sizeOfMatrix
            if (rowCounter == columnCounter) then
                b(rowCounter, columnCounter) = 1
            else
                b(rowCounter, columnCounter) = 0
            end if
        end do
    end do




    do stepCounter = 1, sizeOfMatrix
        pivotRow = stepCounter
        pivotColumn = stepCounter

        rowCurrent = pivotRow
        rowMaximum = getRowNumberForMaxValueInColumn(a, sizeOfMatrix, sizeOfMatrix, pivotColumn, pivotRow)

        if (abs(a(rowCurrent, pivotColumn)) < abs(a(rowMaximum, pivotColumn))) then
            call swapRows(a, rows, columns, rowCurrent, rowMaximum)
        end if

        pivot = a(pivotRow, pivotColumn)

        do columnCounter = 1, sizeOfMatrix
            a(pivotRow, columnCounter) = a(pivotRow, columnCounter) / pivot
            b(pivotRow, columnCounter) = b(pivotRow, columnCounter) / pivot
        end do

        do rowCounter = 1, sizeOfMatrix
            factor = a(rowCounter, pivotColumn)
            do columnCounter = 1, sizeOfMatrix
                if (rowCounter /= pivotRow) then
                    a(rowCounter, columnCounter) = a(rowCounter, columnCounter) - factor * a(pivotRow, columnCounter)
                    b(rowCounter, columnCounter) = b(rowCounter, columnCounter) - factor * b(pivotRow, columnCounter)
                end if
            end do
        end do
    end do

    call printMatrix2D(b, sizeOfMatrix, sizeOfMatrix)


end subroutine getInverse
